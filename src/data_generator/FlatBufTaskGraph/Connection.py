# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatBufTaskGraph

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Connection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Connection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConnection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Connection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Connection
    def Fromnode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Connection
    def Tonode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Connection
    def Nconn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ConnectionStart(builder): builder.StartObject(3)
def Start(builder):
    return ConnectionStart(builder)
def ConnectionAddFromnode(builder, fromnode): builder.PrependUint32Slot(0, fromnode, 0)
def AddFromnode(builder, fromnode):
    return ConnectionAddFromnode(builder, fromnode)
def ConnectionAddTonode(builder, tonode): builder.PrependUint32Slot(1, tonode, 0)
def AddTonode(builder, tonode):
    return ConnectionAddTonode(builder, tonode)
def ConnectionAddNconn(builder, nconn): builder.PrependUint32Slot(2, nconn, 0)
def AddNconn(builder, nconn):
    return ConnectionAddNconn(builder, nconn)
def ConnectionEnd(builder): return builder.EndObject()
def End(builder):
    return ConnectionEnd(builder)